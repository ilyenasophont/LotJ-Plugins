<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Wednesday, April 07, 2010, 4:59 AM -->
<!-- MuClient version 4.40 -->

<!-- Plugin "LotJStudying" generated by Plugin Wizard -->

<muclient>
<plugin
   name="LotJStudying"
   author="@Ilyena"
   id="03fe870f44710763fe6be0bb"
   language="Lua"
   purpose="To make studying easier!"
   save_state="y"
   date_written="2010-04-07 04:58:18"
   requires="4.40"
   version="1.0"
   >
<description trim="y">
<![CDATA[
Type 'studyhelp' to get the commands in the game.
]]>
</description>

</plugin>


<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Triggers  -->

<triggers>
  <trigger
   enabled="y"
   group="Studying"
   match="^(.*)\[ALERT\]\: EMERGENCY COPYOVER \- Keep calm\, we might pull through\!$"
   name="EmergencyStudyProtection"
   script="StartStudying"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   group="Studying"
   match="^You don\'t see anything like that nearby to study\.$"
   name="MissingItem"
   regexp="y"
   script="SkipItem"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   group="Studying"
   match="^You must raise your science level before learning more about this knowledge\.$"
   name="SlideToNextItem"
   regexp="y"
   script="SlideToNextItem"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   group="Studying"
   match="^What the hell is this thing anyways\?$"
   name="BadItem"
   regexp="y"
   script="SkipItem"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   group="Studying"
   match="^You study it for some time\, but fail to learn anything about it\.$"
   name="StartStudying"
   regexp="y"
   script="StartStudying"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   group="Studying"
   match="^(.*) COPYOVER by (.*) \- please remain seated\!$"
   name="CopyoverStudyProtection"
   script="StartStudying"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   group="Studying"
   match="^You may now bot again\.$"
   name="BotStartStudying"
   regexp="y"
   script="StartBottingStudy"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   group="Studying"
   match="^After some time studying you feel you know more\.$"
   name="ContinueStudying"
   regexp="y"
   script="StartStudying"
   sequence="100"
  >
  </trigger>
  <trigger
   enabled="y"
   group="Studying"
   keep_evaluating="y"
   match="^You are now an adept of (.*)!(.*)!$"
   name="FinishedItem"
   regexp="y"
   script="NextItem"
   sequence="100"
  >
  </trigger>
</triggers>

<!--  Aliases  -->

<aliases>
  <alias
   name="AddStudyItem"
   script="AddStudyItem"
   match="^studyadd (.*)$"
   enabled="y"
   group="Studying"
   regexp="y"
   sequence="100"
  >
  </alias>
  <alias
   name="RemoveStudyItem"
   script="RemoveStudyItem"
   match="^studyrem (.*)$"
   enabled="y"
   group="Studying"
   regexp="y"
   sequence="100"
  >
  </alias>
  <alias
   name="DisplayStudyCommands"
   script="DisplayStudyCommands"
   match="studyhelp"
   enabled="y"
   group="Studying"
   send_to="1"
   sequence="100"
  >
  </alias>
  <alias
   name="ClearList"
   script="ClearList"
   match="studyclear"
   enabled="y"
   group="Studying"
   send_to="1"
   sequence="100"
  >
  </alias>
  <alias
   name="SetStudyStatus"
   script="SetStudyStatus"
   match="^Setstudy (.*)$"
   enabled="y"
   group="Studying"
   regexp="y"
   ignore_case="y"
   sequence="100"
  >
  </alias>
  <alias
   name="ShowStudyList"
   script="ShowStudyList"
   match="studylist"
   enabled="y"
   group="Studying"
   send_to="1"
   sequence="100"
  >
  </alias>
  <alias
   name="StartStudying"
   script="StartStudying"
   match="study"
   enabled="y"
   group="Studying"
   send_to="1"
   ignore_case="y"
   sequence="100"
  >
  </alias>
  <alias
   name="ToggleBottingStatus"
   script="SetBottingStatus"
   match="studybot"
   enabled="y"
   group="Studying"
   send_to="12"
   ignore_case="y"
   sequence="100"
  >
  </alias>
  <alias
   name="SetBottingStatus"
   script="SetBottingStatus"
   match="^studybot (.*)$"
   enabled="y"
   group="Studying"
   regexp="y"
   send_to="1"
   ignore_case="y"
   sequence="100"
  >
  </alias>
  <alias
   name="SkipItem"
   script="SkipItem"
   match="studyskip"
   enabled="y"
   group="Studying"
   send_to="1"
   sequence="100"
  >
  </alias>
  <alias
   name="ToggleStudyStatus"
   script="SetStudyStatus"
   match="setstudy"
   enabled="y"
   group="Studying"
   send_to="1"
   ignore_case="y"
   sequence="100"
  >
  </alias>
</aliases>

<!--  Script  -->


<script>
<![CDATA[
studyList = {}
scienceList = {"advanced electronics","chemistry","construction","data","destruction","edibles", "education", "electronics", "enhancement", "equipment", "forensics", "guidance", "machines", "medical", "minerals", "narcotics", "spacecraft", "transportation"}
studyStatus = true
bottingStudy = true
currentPosition = 1

function ShowStudyList(name, line, wildcards)
	t = #studyList
	Note("Study List Contains: ")
	for i = 1, t, 1 do
		if (i ~= currentPosition) then
			Note (studyList[i])
		else
			ColourNote("lime","", ">" .. studyList[i] .. "<")
		end -- if
	end -- for
end -- function

function SetStudyStatus(name, line, wildcards)
	if (wildcards[1] == "on") then
		studyStatus = true
		Note("Autostudy On")
	else
		if (wildcards[1] == "off") then
			studyStatus = false
			Note("Autostudy Off")
		else
			if(studyStatus == true) then
				studyStatus = false
				Note("Autostudy Off")
			else
				studyStatus = true
				Note("Autostudy On")
			end -- if
		end -- if
	end -- if
end -- function

function SetBottingStatus(name, line, wildcards)
	if (wildcards[1] == "on") then
		bottingStudy = true
		Note("BottingStudy On")
	else
		if (wildcards[1] == "off") then
			bottingStudy = false
			Note("BottingStudy Off")
		else
			if(bottingStudy == true) then
				bottingStudy = false
				Note("BottingStudy Off")
			else
				bottingStudy = true
				Note("BottingStudy On")
			end -- if
		end -- if
	end -- if
end -- function

function DisplayStudyCommands(name, line, wildcards)
	Note("Study - Begin Studying")
	Note("Studyadd # - Add Object # to Study List")
	Note("Studyrem # - Remove Object # from Study List")
	Note("Studylist - List Study Objects")
	Note("Studyskip - Skip item in Study List")
	Note("Setstudy (on/off) - Turns autostudying on/off")
	Note("Studybot (on/off) - Turns botting studying on/off")
end -- function

function StartStudying(name, line, wildcards)
	if (studyStatus == true) then
		if studyList[1] ~= nil then -- If something to study
			Send("study " .. studyList[currentPosition])
			Note("Studying " .. studyList[currentPosition])
		else -- If nothing to study
			Note("Finished!")
		end -- if
	end -- if
end -- function

function SlideToNextItem(name, line, wildcards)
	t = #studyList
	if (t > 1) then
		if (studyList[currentPosition + 1] ~= nil) then
			currentPosition = currentPosition + 1
		else
			currentPosition = 1
		end -- if
		StartStudying()
	end -- if
end -- function

function SkipItem(name, line, wildcards)
	if (studyStatus == true) then
		if (studyList[currentPosition + 1] ~= nil) then
			Note("Now working on " .. studyList[2])
		else
			if(studyList[1] ~= nil) then
			Note("Now working on " .. studyList[1])
			else
			Note("Study List Now Empty!")
			end -- if
		end -- if
		table.remove(studyList, currentPosition)
		if (studyList[currentPosition] == nil) then
			currentPosition = 1
		end -- if
		StartStudying()
	end -- if
end -- function

function NextItem(name, line, wildcards)
	if (studyStatus == true) then
		for i, v in ipairs(scienceList) do
			if (v == wildcards[1]) then
				if (studyList[currentPosition + 1] ~= nil) then
					Note("Now working on " .. studyList[currentPosition + 1])
				else
					if (studyList[1] ~= nil) then
						Note("Now working on " .. studyList[1])
					end -- if
				end -- if
				table.remove(studyList, currentPosition)
				
				if (studyList[currentPosition] == nil) then
					currentPosition = 1
				end -- if
				StartStudying()
			end -- if
		end -- for
	end -- if
end -- function

function AddStudyItem(name, line, wildcards)
	t = #studyList -- Find the size of the study list
	if (t == 0) then
		table.insert(studyList, 1, wildcards[1]) -- Make first entry
	else
		table.insert(studyList, wildcards[1]) -- Make subsequent entries
	end --if
	Note(wildcards[1] .. " Added to Study List.")
end -- function

function StartBottingStudy(name, line, wildcards)
	if(bottingStudy == true) then
		Send("afk")
		Send("bot start")
		StartStudying()
	end -- if
end -- function

 function RemoveStudyItem(name, line, wildcards)
	t = #studyList
	for i, v in ipairs(studyList) do
		if (v == wildcards[1]) then
			Note("Removed " .. wildcards[1] .. " From Study List.")
			table.remove(studyList, i)
			break
		else
			if (t == i) then
				Note("Did Not Find Study Item In List")
			end -- if
		end -- if
	end -- for
 end -- function
 
 function ClearList(name, line, wildcards)
	studyList = {}
	Note("Study List Cleared.")
	currentPosition = 1
 end -- function
]]>
</script>


<!--  Plugin help  -->

<aliases>
  <alias
   script="OnHelp"
   match="LotJStudying:help"
   enabled="y"
  >
  </alias>
</aliases>

<script>
<![CDATA[
function OnHelp ()
  world.Note (world.GetPluginInfo (world.GetPluginID (), 3))
end
]]>
</script> 

</muclient>
